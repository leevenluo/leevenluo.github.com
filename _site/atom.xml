<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Happy Hacking</title>
 <link href="http://dyang.github.com/atom.xml" rel="self"/>
 <updated>2015-01-29T00:09:13+08:00</updated>
 <id>http://dyang.github.com</id>
 <author>
   <name>Derek Yang</name>
   <email>yanghada@gmail.com</email>
 </author>

 
 <entry>
   <title>Scrapy安装配置初探</title>
   <link href="http://dyang.github.com/scrapy/python/crawler/2015/01/28/scrapyInstallConfig.html"/>
   <updated>2015-01-28T00:00:00+08:00</updated>
   <id>http://dyang.github.com/scrapy/python/crawler/2015/01/28/scrapyInstallConfig</id>
   <content type="html">&lt;h1&gt;Scrapy初识&lt;/h1&gt;
&lt;p&gt;Scrapy目的是为爬取网站数据，提取结构性数据而编写的框架。应用包括数据挖掘，信息处理或存储历史数据等一系列的程序中。 其最初是为了页面抓取（更确切来说， 网络抓取）所设计的， 也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy用途广泛，可以用于数据挖掘、监测和自动化测试等领域。&lt;/p&gt;
&lt;p&gt;由于项目需求支持，不经意间了解到它，当时是这样的，我自己评估整个工作的工作量后，写抓取客户端不是多困难的事情，但是解析抓取回来网页的工作却是过程中最耗时，假如可以，我希望有一套既能满足抓取需求，同时又具有网页解析加抽取能力的框架，加上最近对python比较感冒，估摸着应该会有（python背后有千万级的开源库支持），朝着这个方向找下去，Scrapy就粗线了。&lt;/p&gt;
&lt;p&gt;这里先说结果，Scrapy大大超出我的预期，除了满足我的需求外，还有很多加分选项的支持，假如时间允许的话，我打算把Scrapy框架源代码看一下，学习一下这个功能强大但架构轻便的东东。所以这会又是一个开源学习系列（继OSQA之后，可能写这篇文章时候还没有来得及把OSQA开源学习系列文章更新，我会逐渐更新的哈，最近工作还是太忙，写文章时间有限）&lt;/p&gt;
&lt;h1&gt;Scrapy架构梳理&lt;/h1&gt;
&lt;h2&gt;Scrapy架构流程图&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/scrapy/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Scrapy基础组件介绍&lt;/h2&gt;
&lt;p&gt;Scrapy主要包括以下组件：&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;引擎(Scrapy)&lt;/strong&gt; ： 用来处理整个系统的数据流处理， 触发事务(框架核心)&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;调度器(Scheduler)&lt;/strong&gt; ： 用来接受引擎发过来的请求， 压入队列中， 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列， 由它来决定下一个要抓取的网址是什么， 同时去除重复的网址&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;下载器(Downloader)&lt;/strong&gt; ： 用于下载网页内容， 并将网页内容返回给蜘蛛(Scrapy下载器是建立在twisted这个高效的异步模型上的)&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;爬虫(Spiders)&lt;/strong&gt; ： 爬虫是主要干活的， 用于从特定的网页中提取自己需要的信息， 即所谓的实体(Item)。用户也可以从中提取出链接，让Scrapy继续抓取下一个页面&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;项目管道(Pipeline)&lt;/strong&gt; ： 负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫解析后，将被发送到项目管道，并经过几个特定的次序处理数据&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;调度中间件(Scheduler Middewares)&lt;/strong&gt; ： 介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;下载器中间件(Downloader Middlewares)&lt;/strong&gt; ： 位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;爬虫中间件(Spider Middlewares)&lt;/strong&gt; ： 介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Scrapy运行流程介绍&lt;/h2&gt;
&lt;p&gt;Scrapy运行流程大概如下：&lt;/p&gt;
&lt;p&gt;1、引擎从调度器中取出一个链接（URL）用于接下来的抓取&lt;br /&gt;
2、引擎把URL封装成一个请求（Request）传给下载器，下载器把资源下载下来，并封装成应答包（Response）&lt;br /&gt;
3、爬虫解析Response，若是解析出实体（Item），则交给实体管道进行进一步的处理；若是解析出的是链接（URL），则把URL交给调度器等待抓取&lt;/p&gt;
&lt;h1&gt;Scrapy框架安装&lt;/h1&gt;
&lt;h2&gt;pip安装&lt;/h2&gt;
&lt;p&gt;安装scrapy： &lt;strong&gt;pip install scrapy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装成功后lib/site-packages文件夹中该具有的packages：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pyOpenSSL-0.14-py2.7.egg-info
six-1.9.0.dist-info
queuelib-1.2.2.dist-info
scrapy
Scrapy-0.24.4.dist-info
lxml-3.4.1-py2.7.egg-info
w3lib-1.11.0.dist-info
cssselect-0.9.1-py2.7.egg-info
Twisted-14.0.2-py2.7.egg-info
cryptography-0.7.2-py2.7.egg-info
zope.interface-4.1.2-py2.7-nspkg.pth
zope.interface-4.1.2-py2.7.egg-info
cffi-0.8.6-py2.7.egg-info
pyasn1-0.1.7-py2.7.egg-info
enum34-1.0.4-py2.7.egg-info
pycparser-2.10-py2.7.egg-info&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;Scrapy安装过程问题汇总&lt;/h2&gt;
&lt;p&gt;1、ERROR: /bin/sh: xslt-config: command not found&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Building lxml version 3.4.1.
Building without Cython.
ERROR: /bin/sh: xslt-config: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found

** make sure the development packages of libxml2 and libxslt are installed **&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决： &lt;strong&gt;yum install libxslt-devel libxml2-devel&lt;/strong&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;2、bz2 module is not available&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;使用pip安装twisted的时候出现

CompressionError: bz2 module is not available 错误的。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决： &lt;strong&gt;yum install bzip2-devel&lt;/strong&gt; ，安装完后建议重新编译python&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;3、No package &amp;#8216;libffi&amp;#8217; found&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pkg_resources.DistributionNotFound: cryptography&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.2.1，于是运行
easy_install cryptography 但是报  No package &lt;span class=&quot;s1&quot;&gt;&amp;#39;libffi&amp;#39;&lt;/span&gt; found错误&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决： &lt;strong&gt;yum install libffi-devel&lt;/strong&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;4、UserWarning: You do not have the service_identity module installed&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/data/leevenluo/python_proj/webcrawler/lib/python2.7/site-packages/twisted/internet/_sslverify.py:184: UserWarning: You &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; not have the service_identity module installed. Please install it from &amp;lt;https://pypi.python.org/pypi/service_identity&amp;gt;. Without the service_identity module and a recent enough pyOpenSSL tosupport it， Twisted can perform only rudimentary TLS client hostnameverification.  Many valid certificate/hostname mappings may be rejected.
  verifyHostname， &lt;span class=&quot;nv&quot;&gt;VerificationError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; _selectVerifyImplementation&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决： &lt;strong&gt;pip install service_identity&lt;/strong&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Scrapy安装完成验证&lt;/h2&gt;
&lt;p&gt;Scrapy是否安装完成，只用尝试项目生成： &lt;strong&gt;scrapy startproject tutorial&lt;/strong&gt; ，假如成功代表安装完成&lt;/p&gt;
&lt;h1&gt;后续补充及参考文档&lt;/h1&gt;
&lt;p&gt;1、 框架基本使用方法&lt;br /&gt;
2、 &lt;a href=&quot;http://scrapy.org/&quot;&gt;Scrapy项目主页&lt;/a&gt;&lt;br /&gt;
3、 &lt;a href=&quot;http://doc.scrapy.org/en/latest/&quot;&gt;Scrapy文档API查询&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>imac安装win7双系统小记</title>
   <link href="http://dyang.github.com/mac/windows7/2015/01/25/imacInstallWin7.html"/>
   <updated>2015-01-25T00:00:00+08:00</updated>
   <id>http://dyang.github.com/mac/windows7/2015/01/25/imacInstallWin7</id>
   <content type="html">&lt;h1&gt;装机背景&lt;/h1&gt;
&lt;p&gt;最近遇到些特殊的需求，需要windows才能支持，没办法，只能在imac上装一个windows，那现在面临的选择是格盘重装，还是装双系统？&lt;/p&gt;
&lt;p&gt;虽然之前在笔记本上也装过不少linux系统，ubuntu版本除外（为了降低安装系统的难度和风险，分区是在windows逻辑分区内进行，无需配置系统引导（比如grub）），其他版本安装，都需要自己了解系统分区，重新分区给新系统并为多系统配置入口引导，属于是放弃治疗型的。虽然有一些经验，由于一直没有尝试在苹果机装系统，也不能直接移植过来。先百度下前人安装的经验吧&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/imacInstWin7/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;装机流程介绍&lt;/h1&gt;
&lt;p&gt;新系统安装的整体流程是亘古不变的：分区 &amp;#8594; 安装新系统 &amp;#8594; 安装引导、驱动；在网上看了几篇相关的教程，imac系统安装双系统依靠软件： &lt;strong&gt;Boot camp&lt;/strong&gt; ，整体流程不涉及太多有风险的步骤，细节参考 &lt;a href=&quot;http://jingyan.baidu.com/article/95c9d20d9cb070ec4f75615a.html&quot;&gt;安装教程&lt;/a&gt; ，以下主要讲述安装过程中遇到的问题与解决方法&lt;/p&gt;
&lt;h2&gt;没有USB驱动器&lt;/h2&gt;
&lt;p&gt;&amp;#8220;没有USB驱动器连接到系统，请先插入USB驱动器，然后再继续&amp;#8221; 提示错误？&lt;/p&gt;
&lt;p&gt;原因：由于不同的mac机器硬件配置不一致，所以在安装玩windows7之后需要安装的驱动也不一致。安装之前需要提供外接存储设备，imac会根据机器的详细配置，下载win7对应的驱动支持。所以需要是因为没有插入外接USB导致该问题提示。&lt;br /&gt;
解决：插入大于1G以上的外接存储设备（比如USB存储）即可解决该问题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/imacInstWin7/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;无创建win7安装磁盘选项&lt;/h2&gt;
&lt;p&gt;&amp;#8220;Boot Camp选择任务页，无第一项window7安装磁盘选项&amp;#8221; ？&lt;/p&gt;
&lt;p&gt;原因：不明，一些有经验的同学反馈是系统是阉割版的系统导致，要有该项需要balalalla&amp;#8230;的一堆设置；&lt;br /&gt;
解决：因为本人安装是用系统盘，所以不需要创建新win7安装磁盘，直接跳过，最后也成功安装了；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/imacInstWin7/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;无法使用该USB驱动器&lt;/h2&gt;
&lt;p&gt;Boot Camp选择任务页，点击&amp;quot;继续&amp;quot;后，弹出提示&amp;quot;无法使用该USB驱动器，请将该USB驱动器格式化为单个FAT分区&amp;quot; ？&lt;/p&gt;
&lt;p&gt;原因：系统无法识别USB驱动器的文件系统格式；（有些同学在windows把U盘下面格式化FAT格式还是不行，应该是在windows的FAT格式化以后不满足Mac想要的FAT格式）&lt;br /&gt;
解决： 插入U盘，在Mac中打开【应用程序】中&amp;quot;其他&amp;quot;文件夹下的&amp;quot;磁盘工具&amp;quot;，左边栏选择那个U盘，右边选择&amp;quot;抹掉&amp;quot;选项卡，格式选择：MS-&lt;acronym title=&quot;FAT&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DOC&lt;/span&gt;&lt;/acronym&gt;，点击【抹掉】&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/imacInstWin7/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;win7系统没有声音&lt;/h2&gt;
&lt;p&gt;安装完系统进入win7发现没有声音？&lt;/p&gt;
&lt;p&gt;原因：相关驱动没有安装&lt;br /&gt;
解决：这里有两种办法，第一种就是手动安装之前下载的适配驱动（Boot Camp名字文件夹）；第二种就是安装驱动精灵，安装对应驱动；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/imacInstWin7/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;安装Review&lt;/h1&gt;
&lt;p&gt;总的来说，赞水果系统极致的用户体验，为用户考虑了各种条件的需求，尽可能多的减少用户修改系统对数据造成的安全风险，同时增加工具帮助用户解决需求。很喜欢分区动画的交互，清晰易懂，比输入生硬的磁盘空间大小（ie，k、M、G&amp;#8230;）单位更友好；&lt;/p&gt;
&lt;p&gt;假如以上文章有模糊、问题的地方希望积极给我指出，大家相互交流，共同进步～&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/imacInstWin7/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>域名申请与配置小结</title>
   <link href="http://dyang.github.com/domain/blog/2015/01/22/buildBlog_CustomDomain.html"/>
   <updated>2015-01-22T00:00:00+08:00</updated>
   <id>http://dyang.github.com/domain/blog/2015/01/22/buildBlog_CustomDomain</id>
   <content type="html">&lt;h1&gt;Web请求模型初识&lt;/h1&gt;
&lt;p&gt;首先，我们先从最简单的请求网络模型了解Web访问流程（如图1-1），流程包括：&lt;/p&gt;
&lt;p&gt;1、用户发起第三方站点对应域名的Web请求（比如：百度 www.baidu.com）&lt;br /&gt;
2、域名通过DNS查询到对应站点的主机IP（比如：www.baidu.com &amp;#8594; 119.75.218.70）&lt;br /&gt;
3、最后向该服务器IP（80端口）发起http请求，等待服务器Response&lt;/p&gt;
&lt;p&gt;流程中需要记住的核心是：域名仅仅只是方便记忆的别名（相较IP，域名还有很多优点，只是和本文相关的内容是这点）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/customDomain/1.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;域名申请Web模型&lt;/h1&gt;
&lt;p&gt;在了解简单Web请求模型后，已经基本清楚域名的作用，那么， &lt;strong&gt;该如何申请域名呢？域名运营商为我们做了什么事？&lt;/strong&gt; 刚才在第一节DNS查询对应关系中隐藏了部分细节，其中最重要的是： &lt;strong&gt;域名怎么知道要去哪个DNS IP查询？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;带着这几个问题，我们来看一下改进后Web请求模型（添加申请域名步骤）【如图1-2】&lt;/p&gt;
&lt;p&gt;（省略第一节中已经提到的步骤3-5）&lt;br /&gt;
1、用户通过域名运营商申请独立域名（比如GoDaddy）&lt;br /&gt;
2、域名运营商将域名记录更新到国际根域名服务器（也称顶级域名）（为什么不是DNS？）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/customDomain/2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Now，我们来梳理几个盲点：&lt;br /&gt;
1、明确顶级域名服务商 &lt;strong&gt;不等于&lt;/strong&gt; DNS，DNS仅仅是存储一条域名到IP对应关系的服务器&lt;br /&gt;
2、1-2图中第四步域名查询过程中，在默认DNS查询不到对应记录的条件下， &lt;strong&gt;到顶级域名服务器递归查询，第二步域名商将域名记录更新到顶级域名服务器的目的就是使该查询命中，那么该记录是否是域名与IP对应记录？答案不是&lt;/strong&gt;&lt;br /&gt;
3、申请过域名的同学都知道，域名运营商有自己（或者默认）的DNS服务器， &lt;strong&gt;所以第三点中更新到顶级域名的记录应该不是域名与IP对应记录，而是域名与能解析该域名的服务器IP&lt;/strong&gt;&lt;br /&gt;
4、当查询顶级域名命中后，会再到对应的服务器IP（DNS服务器）查询对应第三方服务器IP&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;DNS定制Web模型&lt;/h1&gt;
&lt;p&gt;域名合理使用的关键在于对Web请求模型了解深度，上面两个主题已经做了简单介绍。下面的主题是上面模型的补充，主要解决的问题是如何做好域名解析容灾，说通俗一点就是如何更好管理自己域名的解析服务器，一种比较常见的做法就是找一个第三方域名解析提供商，这样做能带给你的好处包括：&lt;/p&gt;
&lt;p&gt;1、完善的监控体系，保证7 * 24小时解析服务器不因宕机而无法解析域名&lt;br /&gt;
2、这点是最重要的，选择一个响应快、操作交互简单的第三方域名提供商。不清楚是否是网络被墙的缘故，访问GoDaddy总是响应很慢，对于域名的申请我就忍了（毕竟实惠），可是对于博客运营经常需要关注域名解析情况，老这样就遭不住，所以我果断没有GoDaddy的域名管理，直接选用了DNSPod，至少现在我觉得用得挺流畅和方便的 : )&lt;/p&gt;
&lt;p&gt;那我们还是来看一下新模型（如图1-3）&lt;/p&gt;
&lt;p&gt;（省略第二节中已经提到的步骤1-2、5-7）&lt;br /&gt;
3、将域名解析工作托管给第三方（本文的例子是 DNSPod）&lt;br /&gt;
4、将DNSPod的域名解析服务器域名覆盖到域名运营商默认DNS解析服务器（GoDaddy会将记录更新到顶级域名服务器）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/customDomain/3.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;h1&gt;Github定制域名Web模型&lt;/h1&gt;
&lt;p&gt;前戏已经够足，差不多该实操走完整套流程。因为本博域名也是自己申请的，所以实际的例子就用Github Page搭建blog定制域名走一个。先上一个完整流程架构图（如图1-4）&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;811px&quot; height=&quot;499px&quot; src=&quot;/images/customDomain/4.png&quot; /&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;整个流程步骤：&lt;br /&gt;
1、GoDaddy申请域名a.com&lt;br /&gt;
2、Github Page搭建，默认域名a.github.io，CNAME文件中写blog.a.com&lt;br /&gt;
3、DNSPod记录一条CNAME记录：blog.a.com &amp;#8594; a.github.io&lt;br /&gt;
4、DNSPod服务器域名覆盖到GoDaddy默认域名服务器域名&lt;br /&gt;
5、GoDaddy将域名对应提供解析服务器IP注册到顶级域名&lt;br /&gt;
6、访问blog.a.com&lt;br /&gt;
7、假设默认DNS缓存没有查询到，顶级域名服务器查询到提供解析的服务器IP（DNSPod服务器IP），查询出blog.a.com &amp;#8594; a.github.io对应的IP（a.github.io对应的IP）&lt;br /&gt;
8、向a.github.io对应的IP发起http请求，Github page内容就返回了&lt;/p&gt;
&lt;p&gt;恩，大概就这些内容，假如有说得不对的地方或者有疑问的地方，可以留言给我，希望大家多多交流，相互学习&lt;/p&gt;
&lt;h1&gt;Git-Page域名配置参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;Github Pages定制域名配置&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&quot;&gt;Github Pages CNAME文件配置&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/&quot;&gt;Github 顶级与二级域名配置&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>一起写blog-Hacking篇</title>
   <link href="http://dyang.github.com/blog/2013/04/03/buildBlog_hacking.html"/>
   <updated>2013-04-03T00:00:00+08:00</updated>
   <id>http://dyang.github.com/blog/2013/04/03/buildBlog_hacking</id>
   <content type="html">&lt;h1&gt;Hacking篇&lt;/h1&gt;
&lt;p&gt;之前的搭建教程已经可以帮助你构建一个博客的雏形, 不过目前的它还比较单调, 因为所有的操作都是github帮你完成了, github已经为我们提供了免费的域名和空间, 希望我们能自己动手DIY一个自己喜欢的博客样板, 为github减轻一些负担, 也为自己打造一个专属自己的博客&lt;/p&gt;
&lt;p&gt;开始之前, 我们需要简单回顾一下在起始篇中谈到的本次搭建博客的整体思路, 即: &lt;strong&gt;先在本地编写符合Jekyll规范的网站源码, 然后上传到github, 由github生成并托管整个网站&lt;/strong&gt; . 现在Git配置和Github的搭建已经完成, 接下来就是要学习符合jekyll规范的编码和文件组织&lt;/p&gt;
&lt;h1&gt;jekyll配置介绍&lt;/h1&gt;
&lt;h2&gt;jekyll目录结构&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;Dir
|-- _config.yml
|-- _layouts
|	|-- default.html
|-- _posts
|	|-- 日期-Title.html
|-- index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;jekyll文件和目录介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;config.yml :&lt;/strong&gt;&lt;br /&gt;
它是jekyll的配置文件, 大多数只用设置baseurl选项, 若缺少该文件, 系统会自动生成一份默认配置, 具体解释参考 &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_layouts :&lt;/strong&gt;&lt;br /&gt;
这是一个用于存放模板文件的目录, 可以自定义页面的排版, Jekyll使用 &lt;a href=&quot;https://github.com/shopify/liquid/wiki/liquid-for-designers&quot;&gt;Liquid模板语言&lt;/a&gt; , 可参考 &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_posts :&lt;/strong&gt;&lt;br /&gt;
这里就是存放你博文的目录, 有固定的命名方式&amp;quot;年-月-日-文章标题.后缀名&amp;quot;, 至于后缀名则看你所使用的文档编写语言, 纯网页代码则是.html后缀: 若使用了轻量级标记语言, 如markdown则.md后缀, textile则.textile后缀&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index.html :&lt;/strong&gt;&lt;br /&gt;
经常和web打交道的同学应该很熟系这个文件, 这里也用它表示博客的首页&lt;/p&gt;
&lt;p&gt;核心思想就是 &lt;strong&gt;模板+博文+环境配置=每一页博客&lt;/strong&gt; , 而且这这个式子里, 只有博文是不同, 模板和环境一般都只用配置一次. 当然你也可以把博客里的每一页都设置成不同的样式, 决定权完全取决于你&lt;/p&gt;
&lt;h1&gt;小试牛刀&lt;/h1&gt;
&lt;p&gt;按照之前的文件组织在本地创建一份, 假设主目录名为MainDir&lt;/p&gt;
&lt;h2&gt;_config.yml文件&lt;/h2&gt;
&lt;p&gt;jekyll 的全局配置在 _config.yml 文件中配置, 比如网站的名字, 网站的域名, 网站的链接格式, _config.yml简单例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;baseurl:/MainDir&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;default.html文件&lt;/h2&gt;
&lt;p&gt;对于网站的布局, 我们一般会写成模板的形式, 这样对于写实质性的内容时, 比如文章, 只需要专心写文章的内容, 然后加个标签指定用哪个模板即可. 对于内容, 属于继承模板. 为什么这样说呢? 因为这个模板时可以多层嵌套的, 内容实际上是模板的叶子节点而已. _layouts目录下的default.html文件例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/html; charset=utf-8&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    {{ content }}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS : {{ page.title }}表示文章标题, {{ content }}表示文章内容&lt;/p&gt;
&lt;h2&gt;blog文件&lt;/h2&gt;
&lt;p&gt;博客文章内容, 编写_posts目录下的2013-04-03-buildBlog.html文件例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: default
title: buildBlog
---
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Let&amp;#39;s go to build own blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{ page.date | date_to_string }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS: 在 &lt;code&gt;---&lt;/code&gt; 之间的内容是yaml文件头, 用于设置特定标识的元数据, 比如 “layout” 参数设置使用_layouts目录下的同名模板作为博客的模板, 其他的设置项可以在 &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;这里&lt;/a&gt; 查找&lt;/p&gt;
&lt;h2&gt;index.html文件&lt;/h2&gt;
&lt;p&gt;博客首页, 编写index.html文件例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;
---
layout: default
title: 大家一起来写博客吧
---
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ page.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;大家一起来写博客吧&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    {% for post in site.posts %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ post.date | date_to_string }}
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.baseurl }} {{ post.url }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;本地测试&lt;/h2&gt;
&lt;p&gt;编写完成, 接下来需要进行测试, 一种方法就是将代码push到github服务, 然后用域名 “username.github.com” 访问, 不过每次都这样为了测试频繁push似乎太麻烦了, 能不能在本地进行jekyll测试呢? 答案是肯定的, 搞起:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;linux 环境&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;推荐&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
系统一般都预装了Ruby, Jekyll是Ruby开发的, 可以直接安装,
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install Jekyll
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll --version
Jekyll 0.12.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;windons 环境请参考 &lt;a href=&quot;http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本地jekyll测试环境搭建好后, 测试开始:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;MainDir
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll --server
WARNING: Could not &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;configuration. Using defaults &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;and options&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
    Invalid configuration - /home/lxinji/MainDir/_config.yml
Building site: /home/lxinji/MainDir -&amp;gt; /home/lxinji/MainDir/_site
Successfully generated site: /home/lxinji/MainDir -&amp;gt; /home/lxinji/MainDir/_site
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2013-04-04 03:03:37&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2013-04-04 03:03:37&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  ruby 1.8.7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2011-06-30&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;i686-linux&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2013-04-04 03:03:42&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; WARN  TCPServer Error: Address already in use - &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2013-04-04 03:03:42&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  WEBrick::HTTPServer#start: &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;13554&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS: 若看到上面的打印则表示jekyll已经帮你生成好了页面, 服务绑定在localhost:4000, 现在可以在浏览器中键入 http://localhost:4000/ 开始测试DIY的博客啦&lt;/p&gt;
&lt;p&gt;若以上的过程都顺利完成了, 那么接下来的最后一步就是将你的博客发布出去:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone http://github.com/username/username.github.com
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;username.github.com
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -rf &lt;span class=&quot;s2&quot;&gt;&amp;quot;除了.git外的所有文件&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp -r ../MainDir ./
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll --server &lt;span class=&quot;c&quot;&gt;#再验证一次&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -am &lt;span class=&quot;s2&quot;&gt;&amp;quot;first update&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;PS: 过几分钟你就可以用username.github.com访问你上传的博客了,恭喜 : )&lt;/p&gt;
&lt;h1&gt;一些扩展&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kuqin.com/managetool/20110705/92113.html&quot;&gt;10篇写给Git初学者的教程&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.yangzhiping.com/tech/writing-space.html&quot;&gt;理想的写作环境:git+github+markdown+jekyll&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>一起写blog-搭建篇</title>
   <link href="http://dyang.github.com/blog/2013/03/30/buildBlog_building.html"/>
   <updated>2013-03-30T00:00:00+08:00</updated>
   <id>http://dyang.github.com/blog/2013/03/30/buildBlog_building</id>
   <content type="html">&lt;h1&gt;搭建篇&lt;/h1&gt;
&lt;h1&gt;GitHub Pages 搭建&lt;/h1&gt;
&lt;p&gt;紧接着第二章配置篇, 在第二章已经完成了本地Git环境配置, 那么接下来就可以搭建Github Pages。其实只需要两步, 就可以完成个人主页的搭建:&lt;/p&gt;
&lt;p&gt;PS: 若想创建形如“username.github.com”域名主页, 每个用户名只能创建一个&lt;/p&gt;
&lt;h2&gt;创建GitHub帐号&lt;/h2&gt;
&lt;p&gt;用你创建的GitHub帐号 &lt;a href=&quot;http://github.com&quot;&gt;登录 Github&lt;/a&gt;, 接下来点击右上角“create a new repo”创建新的代码仓库&lt;/p&gt;
&lt;p&gt;PS: 创建仓库名(Repository Name)格式:username.github.com, 比如:leevenluo.github.com；之后点击“Create Repository”完成创建&lt;/p&gt;
&lt;h2&gt;生成项目个人主页&lt;/h2&gt;
&lt;p&gt;点击代码代码仓库右边的&amp;quot;setting”:(若找不到, 可点击刚创建的代码仓库名回到仓库主页面)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/buildBlog_5.0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在下面找到“Github Pages”&amp;#8212;&amp;gt;&amp;quot;Automatic Page Generator&amp;quot;, 到页面最下面点击“Continue To Layouts”, 然后就可以看到Github为你自动生成的主页, 这时你可以在上面列出的几种主题里选择你喜欢的, 然后点击“Publish”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/buildBlog_6.0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;恭喜你, 这时你已经创建好了个人主页, 主页域名是:username.github.com, 不过你需要短暂的等待几分钟才可以正常访问, 因为github需要时间为你生效你的配置。&lt;/p&gt;
&lt;p&gt;细心的读者应该已经发现你创建的代码仓库里已经有了代码, 没错, 那个就是Github为你生成个人主页的模板,在下一篇里我会和你一起来了解该如何编写和提交个人主页代码。&lt;/p&gt;
&lt;h1&gt;一些扩展&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://help.github.com/categories/20/articles&quot;&gt;Github Pages官方教程&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>一起写blog-配置篇</title>
   <link href="http://dyang.github.com/blog/2013/03/28/buildBlog_configure.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://dyang.github.com/blog/2013/03/28/buildBlog_configure</id>
   <content type="html">&lt;h1&gt;配置篇&lt;/h1&gt;
&lt;h1&gt;配置和使用Github&lt;/h1&gt;
&lt;p&gt;要使用Git, 需要安装它的客户端, 推荐在Linux下使用Git, 会比较方便. Windows版的下载地址在 &lt;a href=&quot;http://code.google.com/p/msysgit/downloads/list&quot;&gt;这里&lt;/a&gt; . 其他系统的安装也可以参考 &lt;a href=&quot;https://help.github.com/articles/set-up-git&quot;&gt;官方的安装教程&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;下载安装客户端之后, 各个系统的配置就类似了, 我们使用windows作为例子, Linux和Mac与此类似. 为了更好的完成下面的步骤, 建议先到 &lt;a href=&quot;http://github.com&quot;&gt;Github站点&lt;/a&gt; 申请自己的帐号, 因为后面的步骤中需要用到. 在Windows下, 打开Git Bash, 其他系统下面则打开终端（Terminal）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意: 下面的步骤是设置给Github提交代码的权限&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;检查SSH keys的设置&lt;/h2&gt;
&lt;p&gt;首先我们需要检查你电脑上现有的ssh key:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ssh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果显示“No such file or directory”, 跳到第三步, 否则继续.&lt;/p&gt;
&lt;h2&gt;保存ssh key设置&lt;/h2&gt;
&lt;p&gt;因为已经存在key文件, 所以需要备份旧的数据并删除:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls
id_rsa  id_rsa.pub  known_hosts
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir key_backup
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv id_rsa* key_backup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;生成新的SSH Key&lt;/h2&gt;
&lt;p&gt;输入下面的代码, 就可以生成新的key文件, 我们只需要默认设置就好, 所以当需要输入文件名的时候, 回车就好.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen -t rsa -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;邮件地址@youremail.com&amp;quot;&lt;/span&gt;
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/Users/your_user_directory/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&amp;lt;回车就好&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后系统会要你输入加密串（Passphrase）:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:&amp;lt;输入加密串&amp;gt;
Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后看到这样的界面, 就成功设置ssh key了:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Your identification has been saved in /home/lxinji/.ssh/id_rsa.
Your public key has been saved in /home/lxinji/.ssh/id_rsa.pub.
The key fingerprint is:
6a:a4:c9:98:85:48:c4:c9:38:9e:90:fa:23:b8:ca:54 loxinji@gmail.com
The key&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+--&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; RSA 2048&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;----+
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;+o.              &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;*+               &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;+o.              &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;o+ .             &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;o..E. . S        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;o +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; + .         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; +o.+ o          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;+    .           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;o.               &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
+-----------------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;添加SSH Key到GitHub&lt;/h2&gt;
&lt;p&gt;在本机设置SSH Key之后, 需要添加到GitHub上, 以完成SSH链接的设置. 用文本编辑工具打开id_rsa.pub文件, 如果看不到这个文件, 你需要设置显示隐藏文件. 准确的复制这个文件的内容, 才能保证设置的成功. 在GitHub的主页上右上角点击设置按钮:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/buildBlog_4.0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在左侧选择SSH Keys项, 点击“Add &lt;span class=&quot;caps&quot;&gt;SSH&lt;/span&gt; key”, 把复制的内容粘贴进去, 然后点击Add Key按钮即可, 注意: 若添加不成功, 请重新复制本地SSH Keys&lt;/p&gt;
&lt;h2&gt;验证效果&lt;/h2&gt;
&lt;p&gt;可以输入下面的命令, 看看设置是否成功, git@github.com的部分不要修改:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh -T git@github.com&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果是下面的反应(本人配置没有出现过, 若出现可以参考以下方法):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;The authenticity of host &lt;span class=&quot;s1&quot;&gt;&amp;#39;github.com (207.97.227.239)&amp;#39;&lt;/span&gt; can&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt; connecting &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;yes/no&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不要紧张, 输入yes就好, 然后会看到:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Hi &amp;lt;em&amp;gt;username&amp;lt;/em&amp;gt;! You&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;ve successfully authenticated, but GitHub does not provide shell access.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到这里, 已经生成了SSH Key, 这里的主要作用是在本地Git和Github进行连接时必须要进行身份确认, &lt;span class=&quot;caps&quot;&gt;SSH&lt;/span&gt; key就是认证凭证.&lt;/p&gt;
&lt;h2&gt;设置你的账号信息&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;你的名字&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;your_email@youremail.com&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在你可以成功连接GitHub了,测试连接放在下一篇里, 因为现在你的远程仓库中还没有代码可以pull到本地.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>一起写blog-起始篇</title>
   <link href="http://dyang.github.com/blog/2013/03/28/buildBlog_beginning.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://dyang.github.com/blog/2013/03/28/buildBlog_beginning</id>
   <content type="html">&lt;h1&gt;起始篇&lt;/h1&gt;
&lt;p&gt;我这里所讲的博客搭建环境是: &lt;b&gt;github pages + jekyll&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;在这里, 先感谢以下文章的作者, 是你们的博文让我可以成功搭建博客, 在我的文章中或多或少的引用了你们文章中的片段, 只为更多的朋友能早日建立属于他们自己的博客！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://beiyuu.com/github-pages/&quot;&gt;beiyuu博客&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://yanping.me/cn/blog/2012/03/18/github-pages-step-by-step/&quot;&gt;yanping博客&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;什么是gitbub pages？&lt;/h1&gt;
&lt;p&gt;首先需要介绍下Github, GitHub 是一个用于使用Git版本控制系统项目的共享虚拟主机服务. 它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成. 总的来说, github 是一个免费的代码管理仓库, 负责开发项目的代码托管, 关于github的相关信息可以 &lt;a href=&quot;http://zh.wikipedia.org/wiki/GitHub&quot;&gt;点击这里&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;github给你提供了项目的存储空间, 在你的项目主页上可以浏览源码树:&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;552&quot; height=&quot;230&quot; src=&quot;/images/buildBlog_1.0.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;不过这样的项目主页似乎不怎么友好, 不能提供简易的操作和展示项目的模型和效果, 所以github需要提供一个友好且易于展示项目的平台, github pages就这样诞生了. github Pages可以被认为是用户编写的、托管在github上的静态网页.&lt;/p&gt;
&lt;p&gt;github提供模板, 允许站内生成网页, 但也允许用户自己编写网页, 然后上传. 有意思的是, 这种上传并不是单纯的上传, 而是会经过Jekyll程序的再处理.&lt;/p&gt;
&lt;h1&gt;Jekyll是什么？&lt;/h1&gt;
&lt;p&gt;Jekyll（发音/&amp;#8217;dʒiːk əl/, &amp;quot;杰克尔&amp;quot;）是一个静态站点生成器, 它会根据网页源码生成静态文件. 它提供了模板、变量、插件等功能, 所以实际上可以用来编写整个网站. 整个思路到这里就很明显了. 你先在本地编写符合Jekyll规范的网站源码, 然后上传到github, 由github生成并托管整个网站.&lt;/p&gt;
&lt;p&gt;这种做法的好处是:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;免费, 无限流量.&lt;/li&gt;
	&lt;li&gt;享受git的版本管理功能, 不用担心文章遗失.&lt;/li&gt;
	&lt;li&gt;你只要用自己喜欢的编辑器写文章就可以了, 其他事情一概不用操心, 都由github处理.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它的缺点是:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;有一定技术门槛, 你必须要懂一点git和网页开发.&lt;/li&gt;
	&lt;li&gt;它生成的是静态网页, 添加动态功能必须使用外部服务, 比如评论功能就只能用disqus.&lt;/li&gt;
	&lt;li&gt;它不适合大型网站, 因为没有用到数据库, 每运行一次都必须遍历全部的文本文件, 网站越大, 生成时间越长.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是, 综合来看, 它不失为搭建中小型Blog或项目主页的最佳选项之一.&lt;/p&gt;</content>
 </entry>
 
 
</feed>
