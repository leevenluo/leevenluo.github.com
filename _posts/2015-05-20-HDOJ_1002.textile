---
layout:     post
title:      HDOJ-1002
categories:
    - algorithm

unqid:      cb41df3221dd5a9efe231ea646e91172
---

h1. HDOJ-1002-A + B Problem II

题干主题：该题的目的实现两个正整数求和，加数与被加数位数<=1000，题目原题链接 "点击这里":http://acm.hdu.edu.cn/showproblem.php?pid=1002

解决思路：加数、被加数和结果都用数组存储每一位，过程需要处理进位

过程Review：
1 ) 处理顺序与读入的顺序相反;
2 ) 结果位数比加数与被加数中最长的多一位保护进位处理
3 ) 注意输出格式，每一个Case中空一行(最后结果之后不空)，+ 和 = 号左右有空格等;
4 ) 提交出现RA，仔细找一些边界条件测试，本Case就找一个位数不相同会进位的测试就OK，比如 1 + 9

h2. C++ 版本

{% highlight c++ %}
/*
 * @author leevenzhl@gmail.com
 * @date   2015-05-20
 **/

#include <iostream>
#include <string>

using namespace std;

string add(const string& sAddA, const string& sAddB)
{
    string sA = sAddA, sB = sAddB;

    //补位逻辑，位数少的在前面补0，补齐与位数长的一致
    size_t iMaxLong;
    if (sA.size() != sB.size())
    {
        iMaxLong = sA.size() > sB.size() ? sA.size() : sB.size();

        if (iMaxLong > sA.size())
        {
            string sZero(iMaxLong - sA.size(), '0');
            sA = sZero + sA;
        }
        else
        {
            string sZero(iMaxLong - sB.size(), '0');
            sB = sZero + sB;
        }
    }
    else
    {
        iMaxLong = sA.size();
    }

    //倒序处理位数相加，进位处理
    string sResult(iMaxLong, '0');
    int    iHigh = 0;
    int    i = iMaxLong;
    while (--i >= 0)
    {
        char cLeft, cRight;
        cLeft  = sA[i];
        cRight = sB[i];

        int iResult = (cLeft - '0') + (cRight - '0');

        char c = (iResult + iHigh) % 10 + '0';
        sResult[i] = c;

        iHigh = (iResult + iHigh) / 10;

        if (i == 0 && iHigh > 0)
        {
            char cMaxBit = iHigh + '0';
            string s(1, cMaxBit);
            sResult = s + sResult;
        }
    }

    return sResult;
}

int main (int argc, char *argv[])
{
    size_t iCount = 0;
    cin >> iCount;

    for (size_t i = 1; i <= iCount; i ++)
    {
        string sA, sB;
        cin >> sA >> sB;

        cout << "Case " << i << ":" << endl;
        cout << sA << " + " << sB << " = " << add(sA, sB) << endl;

        if (i < iCount)
        {
            cout << "\n";
        }
    }

    return 0;
}
{% endhighlight %}










