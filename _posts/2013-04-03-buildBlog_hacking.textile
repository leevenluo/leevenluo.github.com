---
layout:     post
title:      一起写blog-Hacking篇
categories: blog
---

h1. Hacking篇

之前的搭建教程已经可以帮助你构建一个博客的雏形, 不过目前的它还比较单调, 因为所有的操作都是github帮你完成了, github已经为我们提供了免费的域名和空间, 希望我们能自己动手DIY一个自己喜欢的博客样板, 为github减轻一些负担, 也为自己打造一个专属自己的博客

开始之前, 我们需要简单回顾一下在起始篇中谈到的本次搭建博客的整体思路, 即: *先在本地编写符合Jekyll规范的网站源码, 然后上传到github, 由github生成并托管整个网站* . 现在Git配置和Github的搭建已经完成, 接下来就是要学习符合jekyll规范的编码和文件组织

h1. jekyll配置介绍

h2. jekyll目录结构

{% highlight html %}
Dir
|-- _config.yml
|-- _layouts
|	|-- default.html
|-- _posts
|	|-- 日期-Title.html
|-- index.html
{% endhighlight %}

h2. jekyll文件和目录介绍

*config.yml :*
它是jekyll的配置文件, 大多数只用设置baseurl选项, 若缺少该文件, 系统会自动生成一份默认配置, 具体解释参考 "官方教程":https://github.com/mojombo/jekyll/wiki/Configuration

*_layouts :*
这是一个用于存放模板文件的目录, 可以自定义页面的排版, Jekyll使用 "Liquid模板语言":https://github.com/shopify/liquid/wiki/liquid-for-designers , 可参考 "官方文档":https://github.com/mojombo/jekyll/wiki/Template-Data

*_posts :*
这里就是存放你博文的目录, 有固定的命名方式"年-月-日-文章标题.后缀名", 至于后缀名则看你所使用的文档编写语言, 纯网页代码则是.html后缀: 若使用了轻量级标记语言, 如markdown则.md后缀, textile则.textile后缀

*index.html :*
经常和web打交道的同学应该很熟系这个文件, 这里也用它表示博客的首页

核心思想就是 *模板+博文+环境配置=每一页博客* , 而且这这个式子里, 只有博文是不同, 模板和环境一般都只用配置一次. 当然你也可以把博客里的每一页都设置成不同的样式, 决定权完全取决于你

h1. 小试牛刀

按照之前的文件组织在本地创建一份, 假设主目录名为MainDir

h2. _config.yml文件

jekyll 的全局配置在 _config.yml 文件中配置, 比如网站的名字, 网站的域名, 网站的链接格式, _config.yml简单例子:

{% highlight html %}
baseurl:/MainDir
{% endhighlight %}

h2. default.html文件

对于网站的布局, 我们一般会写成模板的形式, 这样对于写实质性的内容时, 比如文章, 只需要专心写文章的内容, 然后加个标签指定用哪个模板即可. 对于内容, 属于继承模板. 为什么这样说呢? 因为这个模板时可以多层嵌套的, 内容实际上是模板的叶子节点而已. _layouts目录下的default.html文件例子:

{% highlight html %}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <title>{{ "{{ page.title " }}}}</title>
</head>
<body>
    {{ "{{ content " }}}}
</body>
</html>
{% endhighlight %}

PS : {{ "{{ page.title " }}}}表示文章标题, {{ "{{ content " }}}}表示文章内容

h2. blog文件

博客文章内容, 编写_posts目录下的2013-04-03-buildBlog.html文件例子:

{% highlight html %}
---
layout: default
title: buildBlog
---
<h2>{{ "{{ page.title " }}}}</h2>
<p>Let's go to build own blog</p>
<p>{{ "{{ page.date | date_to_string " }}}}</p>
{% endhighlight %}

PS: 在 <code>---</code> 之间的内容是yaml文件头, 用于设置特定标识的元数据, 比如 “layout” 参数设置使用_layouts目录下的同名模板作为博客的模板, 其他的设置项可以在 "这里":https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter 查找

h2. index.html文件

博客首页, 编写index.html文件例子:

{% highlight html %}
<pre><code>
---
layout: default
title: 大家一起来写博客吧
---
<h2>{{ "{{ page.title " }}}}</h2>
<p>大家一起来写博客吧</p>
<ul>
    {{ "{% for post in site.posts " }}%}
        <li>{{ "{{ post.date | date_to_string " }}}}
            <a href="{{ "{{ site.baseurl " }}}} {{ "{{ post.url " }}}}">{{ "{{ post.title " }}}}</a>
        </li>
    {{ "{% endfor " }}%}
</ul>
{% endhighlight %}

h2. 本地测试

编写完成, 接下来需要进行测试, 一种方法就是将代码push到github服务, 然后用域名 “username.github.com” 访问, 不过每次都这样为了测试频繁push似乎太麻烦了, 能不能在本地进行jekyll测试呢? 答案是肯定的, 搞起:

{% highlight bash %}
linux 环境(推荐):
系统一般都预装了Ruby, Jekyll是Ruby开发的, 可以直接安装,
$ gem install Jekyll
$ jekyll --version
Jekyll 0.12.1
{% endhighlight %}

windons 环境请参考 "这里":http://www.cnblogs.com/purediy/archive/2013/03/07/2948892.html

本地jekyll测试环境搭建好后, 测试开始:

{% highlight bash %}
$ cd MainDir
$ jekyll --server
WARNING: Could not read configuration. Using defaults (and options).
    Invalid configuration - /home/lxinji/MainDir/_config.yml
Building site: /home/lxinji/MainDir -> /home/lxinji/MainDir/_site
Successfully generated site: /home/lxinji/MainDir -> /home/lxinji/MainDir/_site
[2013-04-04 03:03:37] INFO  WEBrick 1.3.1
[2013-04-04 03:03:37] INFO  ruby 1.8.7 (2011-06-30) [i686-linux]
[2013-04-04 03:03:42] WARN  TCPServer Error: Address already in use - bind(2)
[2013-04-04 03:03:42] INFO  WEBrick::HTTPServer#start: pid=13554 port=4000
{% endhighlight %}

PS: 若看到上面的打印则表示jekyll已经帮你生成好了页面, 服务绑定在localhost:4000, 现在可以在浏览器中键入 http://localhost:4000/ 开始测试DIY的博客啦

若以上的过程都顺利完成了, 那么接下来的最后一步就是将你的博客发布出去:

{% highlight bash %}
$ git clone http://github.com/username/username.github.com
$ cd username.github.com
$ rm -rf "除了.git外的所有文件"
$ cp -r ../MainDir ./
$ jekyll --server #再验证一次
$ git add .
$ git commit -am "first update"
$ git push
{% endhighlight %}

PS: 过几分钟你就可以用username.github.com访问你上传的博客了,恭喜 : )

h1. 一些扩展

"10篇写给Git初学者的教程":http://www.kuqin.com/managetool/20110705/92113.html
"理想的写作环境:git+github+markdown+jekyll":http://www.yangzhiping.com/tech/writing-space.html
